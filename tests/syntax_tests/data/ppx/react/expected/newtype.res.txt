@@jsxConfig({version: 4, mode: "classic"})

module V4C = {
  @res.jsxComponentProps
  type props<'a, 'b, 'c> = {a: 'a, b: 'b, c: 'c}

  let make = (type a, props: props<a, array<option<[#Foo(a)]>>, 'a>) => {
    let a: a = props.a
    let b: array<option<[#Foo(a)]>> = props.b
    let c: 'a = props.c
    ReactDOM.createDOMElementVariadic("div", [])
  }
  let make = {
    let \"Newtype$V4C" = (props: props<_>) => make(props)

    \"Newtype$V4C"
  }
}

@@jsxConfig({version: 4, mode: "automatic"})

module V4A = {
  @res.jsxComponentProps
  type props<'a, 'b, 'c> = {a: 'a, b: 'b, c: 'c}

  let make = (type a, props: props<a, array<option<[#Foo(a)]>>, 'a>) => {
    let a: a = props.a
    let b: array<option<[#Foo(a)]>> = props.b
    let c: 'a = props.c
    ReactDOM.jsx("div", {})
  }
  let make = {
    let \"Newtype$V4A" = (props: props<_>) => make(props)

    \"Newtype$V4A"
  }
}

module V4A1 = {
  @res.jsxComponentProps
  type props<'a, 'b, 'c> = {a: 'a, b: 'b, c: 'c}

  let make = (type x y, props: props<x, array<y>, 'a>) => {
    let a: x = props.a
    let b: array<y> = props.b
    let c: 'a = props.c
    ReactDOM.jsx("div", {})
  }
  let make = {
    let \"Newtype$V4A1" = (props: props<_>) => make(props)

    \"Newtype$V4A1"
  }
}

module type T = {
  type t
}

module V4A2 = {
  @res.jsxComponentProps
  type props<'foo> = {foo: 'foo}

  let make = (type a, props: props<_>) => {
    let {foo: (foo: module(T with type t = a))} = props
    module T = unpack(foo)
    ReactDOM.jsx("div", {})
  }
  let make = {
    let \"Newtype$V4A2" = (props: props<_>) => make(props)

    \"Newtype$V4A2"
  }
}

module V4A3 = {
  @res.jsxComponentProps
  type props<'foo> = {foo: 'foo}

  let make = (type a, props: props<_>) => {
    let foo = props.foo
    module T = unpack(foo: T with type t = a)
    foo
  }
  let make = {
    let \"Newtype$V4A3" = (props: props<_>) => make(props)

    \"Newtype$V4A3"
  }
}
@res.jsxComponentProps
type props<'x, 'q> = {x: 'x, q: 'q}

let make = (props: props<('a, 'b), 'a>) => {
  let x: ('a, 'b) = props.x
  let q: 'a = props.q
  [fst(x), q]
}
let make = {
  let \"Newtype" = (props: props<_>) => make(props)

  \"Newtype"
}

@@uncurried

module Uncurried = {
  @res.jsxComponentProps
  type props<'foo> = {foo?: 'foo}

  let make = (type a, props: props<_>) => {
    let foo = props.foo
    React.null
  }
  let make = {
    let \"Newtype$Uncurried" = (props: props<_>) => make(props)

    \"Newtype$Uncurried"
  }
}
