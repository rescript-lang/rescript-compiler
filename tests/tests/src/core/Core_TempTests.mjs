// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Int from "rescript/lib/es6/Int.js";
import * as Dict from "rescript/lib/es6/Dict.js";
import * as $$JSON from "rescript/lib/es6/JSON.js";
import * as $$Array from "rescript/lib/es6/Array.js";
import * as Float from "rescript/lib/es6/Float.js";
import * as $$BigInt from "rescript/lib/es6/BigInt.js";
import * as Option from "rescript/lib/es6/Option.js";
import * as Core_IntlTests from "./intl/Core_IntlTests.mjs";
import * as Primitive_option from "rescript/lib/es6/Primitive_option.js";

console.info("");

console.info("Array");

console.info("---");

let array = [
  1,
  2,
  3,
  4
];

console.info($$Array.reduce(array.map(x => (x << 1)), 0, (a, b) => a + b | 0));

console.info(typeof array);

console.info("");

console.info("Date");

console.info("---");

let date = new Date(Date.UTC(2020, 11));

console.log(date.toUTCString());

console.info("");

console.info("Dict");

console.info("---");

let dict = {};

dict["foo"] = "bar";

let dict2 = Object.assign({}, dict);

Dict.$$delete(dict2, "foo");

console.log(dict, dict2);

console.info("");

console.info("Error");

console.info("---");

function f() {
  let error = new Error("hello");
  let typeError = new TypeError("error");
  let g = () => {
    throw error;
  };
  let h = () => {
    throw typeError;
  };
  return [
    g,
    h
  ];
}

console.info("");

console.info("Float/Int");

console.info("---");

console.log((10.2).toFixed(2));

console.log((10).toFixed(2));

console.log(Int.fromString("0", undefined));

console.log(Float.fromString("0.1"));

console.info("");

console.info("JSON");

console.info("---");

let json = JSON.parse("{\"foo\": \"bar\"}");

let json$1 = $$JSON.Classify.classify(json);

let tmp;

if (typeof json$1 !== "object" || json$1.TAG !== "Object") {
  tmp = undefined;
} else {
  let value = $$JSON.Classify.classify(json$1._0["foo"]);
  tmp = typeof value !== "object" || value.TAG !== "String" ? undefined : value._0;
}

console.log(tmp);

console.info("");

console.info("Map");

console.info("---");

let map = new Map();

map.set(1, 1);

map.set(2, 2);

map.delete(1);

console.log(map);

console.info("");

console.info("Math");

console.info("---");

console.log(Math.ceil(Math.PI / 2.0));

console.info("");

console.info("BigInt");

console.info("---");

console.log(BigInt(1) / BigInt(12.0));

console.info("");

console.info("Object");

console.info("---");

let myObject = {
  foo: "bar"
};

console.log(Object.create(myObject));

console.log(Object.create(myObject, {
  foo: {
    value: "bar"
  }
}));

console.log(Object.create(null));

console.log(Object.create(null, {
  foo: {
    value: "bar"
  }
}));

let copy = Object.assign({}, myObject);

let withNewProp = Object.assign(copy, {
  bar: "baz"
});

console.info("");

console.info("Promise");

console.info("---");

let promise = new Promise((resolve, _reject) => {
  setTimeout(() => resolve(1), 100);
});

promise.then(x => Promise.resolve(x + 1 | 0)).then(x => Promise.resolve(x + 2 | 0)).then(x => {
  console.log(x);
  return Promise.resolve();
}).finally(() => {
  console.log("Promise finally");
});

console.info("");

console.info("RegExp");

console.info("---");

let regex = new RegExp("hello(\\w+)");

let string = "helloworld";

console.log(regex.test(string));

let result = regex.exec(string);

let result$1 = (result == null) ? undefined : Primitive_option.some(result);

console.log(Option.map(result$1, prim => prim.input));

console.log(Option.map(result$1, prim => prim.index));

console.log(Option.map(result$1, prim => prim.slice(1)));

console.info("");

console.info("Set");

console.info("---");

let set = new Set();

set.add(1);

set.add(2);

set.delete(2);

console.log(set);

console.info("");

console.info("String");

console.info("---");

let regexp = new RegExp("(hello )(world)");

console.log("   Hello world  ".toLowerCase().trim().replace(regexp, (param, group1, group2, param$1, param$2) => group1 + group2.toUpperCase()));

console.info("");

console.info("Symbol");

console.info("---");

let x = Symbol.for("Foo");

console.log(x);

let array$1 = Array.from("foo"[Symbol.iterator]());

console.log(array$1);

console.info("");

console.info("Global namespace");

console.info("---");

console.log("number");

let timeout = setTimeout(() => {
  console.log("Hello!");
}, 100);

clearTimeout(timeout);

if (globalThis.hello !== undefined) {
  console.log(globalThis.hello.bar);
  console.log("hello");
}

let z = 1.2 % 1.4;

let intFromBigInt = $$BigInt.toInt(BigInt("10000000000"));

console.log({
  bar: "1"
});

let Bugfix = {};

console.log(Int.fromString("1231231", undefined));

console.log(Int.fromString("12.22", undefined));

console.log(Int.fromString("99999999999999999", undefined));

console.log(Int.fromString("99999999999999999", undefined));

console.log(Int.fromString("010101", 2));

let _collator = Core_IntlTests._collator;

let collator = Core_IntlTests.collator;

let resolvedOptions = Core_IntlTests.resolvedOptions;

let timeZone = Core_IntlTests.timeZone;

let _locale = Core_IntlTests._locale;

let locale = Core_IntlTests.locale;

let currencyFormatter = Core_IntlTests.currencyFormatter;

let roundingFormatter = Core_IntlTests.roundingFormatter;

let groupingFormatter1 = Core_IntlTests.groupingFormatter1;

let groupingFormatter2 = Core_IntlTests.groupingFormatter2;

let sigFormatter = Core_IntlTests.sigFormatter;

let options = Core_IntlTests.options;

let _formatter = Core_IntlTests._formatter;

let formatter = Core_IntlTests.formatter;

let segments = Core_IntlTests.segments;

export {
  _collator,
  collator,
  resolvedOptions,
  timeZone,
  _locale,
  locale,
  currencyFormatter,
  roundingFormatter,
  groupingFormatter1,
  groupingFormatter2,
  sigFormatter,
  options,
  _formatter,
  formatter,
  segments,
  date,
  dict,
  dict2,
  f,
  json,
  map,
  myObject,
  copy,
  withNewProp,
  promise,
  regex,
  string,
  result$1 as result,
  set,
  regexp,
  x,
  array$1 as array,
  timeout,
  z,
  intFromBigInt,
  Bugfix,
}
/*  Not a pure module */
