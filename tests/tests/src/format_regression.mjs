// Generated by ReScript, PLEASE EDIT WITH CARE


function peek_queue(param) {
  throw {
    RE_EXN_ID: "Assert_failure",
    _1: [
      "format_regression.res",
      10,
      22
    ],
    Error: new Error()
  };
}

function int_of_size(param) {
  throw {
    RE_EXN_ID: "Assert_failure",
    _1: [
      "format_regression.res",
      11,
      23
    ],
    Error: new Error()
  };
}

function take_queue(param) {
  throw {
    RE_EXN_ID: "Assert_failure",
    _1: [
      "format_regression.res",
      12,
      22
    ],
    Error: new Error()
  };
}

function format_pp_token(param, param$1, param$2) {
  throw {
    RE_EXN_ID: "Assert_failure",
    _1: [
      "format_regression.res",
      13,
      35
    ],
    Error: new Error()
  };
}

function advance_loop(state) {
  while (true) {
    throw {
      RE_EXN_ID: "Assert_failure",
      _1: [
        "format_regression.res",
        10,
        22
      ],
      Error: new Error()
    };
    throw {
      RE_EXN_ID: "Assert_failure",
      _1: [
        "format_regression.res",
        11,
        23
      ],
      Error: new Error()
    };
    if (size < 0 && (state.pp_right_total - state.pp_left_total | 0) < state.pp_space_left) {
      return;
    }
    throw {
      RE_EXN_ID: "Assert_failure",
      _1: [
        "format_regression.res",
        12,
        22
      ],
      Error: new Error()
    };
    size < 0;
    throw {
      RE_EXN_ID: "Assert_failure",
      _1: [
        "format_regression.res",
        13,
        35
      ],
      Error: new Error()
    };
    state.pp_left_total = match.length + state.pp_left_total | 0;
    continue;
  };
}

let pp_infinity = 1000000010;

export {
  peek_queue,
  int_of_size,
  take_queue,
  format_pp_token,
  pp_infinity,
  advance_loop,
}
/* No side effect */
