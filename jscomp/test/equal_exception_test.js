// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

let Mt = require("./mt.js");
let Bytes = require("../../lib/js/bytes.js");
let Caml_obj = require("../../lib/js/caml_obj.js");
let Caml_bytes = require("../../lib/js/caml_bytes.js");
let Caml_string = require("../../lib/js/caml_string.js");
let Caml_exceptions = require("../../lib/js/caml_exceptions.js");
let Caml_js_exceptions = require("../../lib/js/caml_js_exceptions.js");

let v = "gso";

function is_equal() {
  if (Caml_bytes.get(Bytes.make(3, /* 'a' */97), 0) !== /* 'a' */97) {
    throw new Error("Assert_failure", {
      cause: {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "equal_exception_test.res",
          4,
          2
        ]
      }
    });
  }
  if (Bytes.make(3, /* 'a' */97)[0] !== /* 'a' */97) {
    throw new Error("Assert_failure", {
      cause: {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "equal_exception_test.res",
          5,
          2
        ]
      }
    });
  }
  let u = Bytes.make(3, /* 'a' */97);
  u[0] = /* 'b' */98;
  if (u[0] !== /* 'b' */98) {
    throw new Error("Assert_failure", {
      cause: {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "equal_exception_test.res",
          8,
          2
        ]
      }
    });
  }
  if (Caml_string.get(v, 0) === /* 'g' */103) {
    return;
  }
  throw new Error("Assert_failure", {
    cause: {
      RE_EXN_ID: "Assert_failure",
      _1: [
        "equal_exception_test.res",
        9,
        2
      ]
    }
  });
}

function is_exception() {
  try {
    throw new Error("Not_found", {
      cause: {
        RE_EXN_ID: "Not_found"
      }
    });
  } catch (raw_exn) {
    let exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
    if (exn.RE_EXN_ID === "Not_found") {
      return;
    }
    throw exn;
  }
}

function is_normal_exception(_x) {
  let A = /* @__PURE__ */Caml_exceptions.create("A");
  let v = new Error(A, {
    cause: {
      RE_EXN_ID: A,
      _1: 3
    }
  });
  try {
    throw v;
  } catch (raw_exn) {
    let exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
    if (exn.RE_EXN_ID === A) {
      if (exn._1 === 3) {
        return;
      }
      throw exn;
    }
    throw exn;
  }
}

function is_arbitrary_exception() {
  let A = /* @__PURE__ */Caml_exceptions.create("A");
  try {
    throw new Error(A, {
      cause: {
        RE_EXN_ID: A
      }
    });
  } catch (exn) {
    return;
  }
}

let suites_0 = [
  "is_equal",
  is_equal
];

let suites_1 = {
  hd: [
    "is_exception",
    is_exception
  ],
  tl: {
    hd: [
      "is_normal_exception",
      is_normal_exception
    ],
    tl: {
      hd: [
        "is_arbitrary_exception",
        is_arbitrary_exception
      ],
      tl: /* [] */0
    }
  }
};

let suites = {
  hd: suites_0,
  tl: suites_1
};

let e = new Error("Not_found", {
  cause: {
    RE_EXN_ID: "Not_found"
  }
});

function eq(x) {
  return x.RE_EXN_ID === "Not_found";
}

let Not_found = /* @__PURE__ */Caml_exceptions.create("Equal_exception_test.Not_found");

if (Caml_obj.equal(e, new Error(Not_found, {
    cause: {
      RE_EXN_ID: Not_found
    }
  })) !== false) {
  throw new Error("Assert_failure", {
    cause: {
      RE_EXN_ID: "Assert_failure",
      _1: [
        "equal_exception_test.res",
        50,
        0
      ]
    }
  });
}

if (Not_found === "Not_found" !== false) {
  throw new Error("Assert_failure", {
    cause: {
      RE_EXN_ID: "Assert_failure",
      _1: [
        "equal_exception_test.res",
        51,
        0
      ]
    }
  });
}

Mt.from_suites("exception", suites);

exports.v = v;
exports.is_equal = is_equal;
exports.is_exception = is_exception;
exports.is_normal_exception = is_normal_exception;
exports.is_arbitrary_exception = is_arbitrary_exception;
exports.suites = suites;
exports.e = e;
exports.eq = eq;
exports.Not_found = Not_found;
/*  Not a pure module */
